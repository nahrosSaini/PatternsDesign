/*

CONCEPTS :

1. Avoids Costly creation
2. Avoids subclassing
3. Typically doesn't use new(for once its used)
4. Often utilize an interface
5. Usually implemented with a Registry

Example :
  -> java.lang.Object#clone()


DESIGN :

1. Clone/Cloneable
2. Avoids keyword "new"
3. Although a copy,each instance is new
4. Costly construction not handled by client
5. Can still utilize parameters for construction

PITFALLS :

1. Sometimes not clear when to user
2. Used with other patterns
    ->Registry
3. Shallow / Deep Copy(need to implement manually )


CONTRAST

      PROTOTYPE                         FACTORY

1. Lighter weight construction    1. Flexible  Objects (Multiple Constructors)
    copy Constructor or clone     2. Concrete Instance
2. Shallow or Deep                3. Fresh Instance
3. Copy itself


SUMMARY  :

Guarantee unique instance
Often refactored in
Can help with performance issue
Don't always jump to a factory


*/